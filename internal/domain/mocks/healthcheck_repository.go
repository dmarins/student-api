// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/repositories/healthcheck_repository.go
//
// Generated by this command:
//
//	mockgen -source=internal/domain/repositories/healthcheck_repository.go -destination=internal/domain/mocks/healthcheck_repository.go -typed=true -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIHealthCheckRepository is a mock of IHealthCheckRepository interface.
type MockIHealthCheckRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIHealthCheckRepositoryMockRecorder
}

// MockIHealthCheckRepositoryMockRecorder is the mock recorder for MockIHealthCheckRepository.
type MockIHealthCheckRepositoryMockRecorder struct {
	mock *MockIHealthCheckRepository
}

// NewMockIHealthCheckRepository creates a new mock instance.
func NewMockIHealthCheckRepository(ctrl *gomock.Controller) *MockIHealthCheckRepository {
	mock := &MockIHealthCheckRepository{ctrl: ctrl}
	mock.recorder = &MockIHealthCheckRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIHealthCheckRepository) EXPECT() *MockIHealthCheckRepositoryMockRecorder {
	return m.recorder
}

// CheckDbConnection mocks base method.
func (m *MockIHealthCheckRepository) CheckDbConnection(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckDbConnection", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckDbConnection indicates an expected call of CheckDbConnection.
func (mr *MockIHealthCheckRepositoryMockRecorder) CheckDbConnection(ctx any) *MockIHealthCheckRepositoryCheckDbConnectionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckDbConnection", reflect.TypeOf((*MockIHealthCheckRepository)(nil).CheckDbConnection), ctx)
	return &MockIHealthCheckRepositoryCheckDbConnectionCall{Call: call}
}

// MockIHealthCheckRepositoryCheckDbConnectionCall wrap *gomock.Call
type MockIHealthCheckRepositoryCheckDbConnectionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIHealthCheckRepositoryCheckDbConnectionCall) Return(arg0 error) *MockIHealthCheckRepositoryCheckDbConnectionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIHealthCheckRepositoryCheckDbConnectionCall) Do(f func(context.Context) error) *MockIHealthCheckRepositoryCheckDbConnectionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIHealthCheckRepositoryCheckDbConnectionCall) DoAndReturn(f func(context.Context) error) *MockIHealthCheckRepositoryCheckDbConnectionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
