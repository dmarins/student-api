// Code generated by MockGen. DO NOT EDIT.
// Source: internal/infrastructure/tracer/tracer.go
//
// Generated by this command:
//
//	mockgen -source=internal/infrastructure/tracer/tracer.go -destination=internal/domain/mocks/tracer.go -typed=true -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	http "net/http"
	reflect "reflect"

	logger "github.com/dmarins/student-api/internal/infrastructure/logger"
	tracer "github.com/dmarins/student-api/internal/infrastructure/tracer"
	gomock "go.uber.org/mock/gomock"
)

// MockITracer is a mock of ITracer interface.
type MockITracer struct {
	ctrl     *gomock.Controller
	recorder *MockITracerMockRecorder
	isgomock struct{}
}

// MockITracerMockRecorder is the mock recorder for MockITracer.
type MockITracerMockRecorder struct {
	mock *MockITracer
}

// NewMockITracer creates a new mock instance.
func NewMockITracer(ctrl *gomock.Controller) *MockITracer {
	mock := &MockITracer{ctrl: ctrl}
	mock.recorder = &MockITracerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITracer) EXPECT() *MockITracerMockRecorder {
	return m.recorder
}

// AddAttributes mocks base method.
func (m *MockITracer) AddAttributes(span tracer.ISpan, name string, attributes tracer.Attributes) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddAttributes", span, name, attributes)
}

// AddAttributes indicates an expected call of AddAttributes.
func (mr *MockITracerMockRecorder) AddAttributes(span, name, attributes any) *MockITracerAddAttributesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAttributes", reflect.TypeOf((*MockITracer)(nil).AddAttributes), span, name, attributes)
	return &MockITracerAddAttributesCall{Call: call}
}

// MockITracerAddAttributesCall wrap *gomock.Call
type MockITracerAddAttributesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockITracerAddAttributesCall) Return() *MockITracerAddAttributesCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockITracerAddAttributesCall) Do(f func(tracer.ISpan, string, tracer.Attributes)) *MockITracerAddAttributesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockITracerAddAttributesCall) DoAndReturn(f func(tracer.ISpan, string, tracer.Attributes)) *MockITracerAddAttributesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// NewRootSpan mocks base method.
func (m *MockITracer) NewRootSpan(request *http.Request, spanName string) (tracer.ISpan, context.Context) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewRootSpan", request, spanName)
	ret0, _ := ret[0].(tracer.ISpan)
	ret1, _ := ret[1].(context.Context)
	return ret0, ret1
}

// NewRootSpan indicates an expected call of NewRootSpan.
func (mr *MockITracerMockRecorder) NewRootSpan(request, spanName any) *MockITracerNewRootSpanCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewRootSpan", reflect.TypeOf((*MockITracer)(nil).NewRootSpan), request, spanName)
	return &MockITracerNewRootSpanCall{Call: call}
}

// MockITracerNewRootSpanCall wrap *gomock.Call
type MockITracerNewRootSpanCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockITracerNewRootSpanCall) Return(arg0 tracer.ISpan, arg1 context.Context) *MockITracerNewRootSpanCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockITracerNewRootSpanCall) Do(f func(*http.Request, string) (tracer.ISpan, context.Context)) *MockITracerNewRootSpanCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockITracerNewRootSpanCall) DoAndReturn(f func(*http.Request, string) (tracer.ISpan, context.Context)) *MockITracerNewRootSpanCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// NewSpanContext mocks base method.
func (m *MockITracer) NewSpanContext(ctx context.Context, spanName string) (tracer.ISpan, context.Context) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewSpanContext", ctx, spanName)
	ret0, _ := ret[0].(tracer.ISpan)
	ret1, _ := ret[1].(context.Context)
	return ret0, ret1
}

// NewSpanContext indicates an expected call of NewSpanContext.
func (mr *MockITracerMockRecorder) NewSpanContext(ctx, spanName any) *MockITracerNewSpanContextCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewSpanContext", reflect.TypeOf((*MockITracer)(nil).NewSpanContext), ctx, spanName)
	return &MockITracerNewSpanContextCall{Call: call}
}

// MockITracerNewSpanContextCall wrap *gomock.Call
type MockITracerNewSpanContextCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockITracerNewSpanContextCall) Return(arg0 tracer.ISpan, arg1 context.Context) *MockITracerNewSpanContextCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockITracerNewSpanContextCall) Do(f func(context.Context, string) (tracer.ISpan, context.Context)) *MockITracerNewSpanContextCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockITracerNewSpanContextCall) DoAndReturn(f func(context.Context, string) (tracer.ISpan, context.Context)) *MockITracerNewSpanContextCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Shutdown mocks base method.
func (m *MockITracer) Shutdown(ctx context.Context, logger logger.ILogger) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Shutdown", ctx, logger)
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockITracerMockRecorder) Shutdown(ctx, logger any) *MockITracerShutdownCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockITracer)(nil).Shutdown), ctx, logger)
	return &MockITracerShutdownCall{Call: call}
}

// MockITracerShutdownCall wrap *gomock.Call
type MockITracerShutdownCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockITracerShutdownCall) Return() *MockITracerShutdownCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockITracerShutdownCall) Do(f func(context.Context, logger.ILogger)) *MockITracerShutdownCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockITracerShutdownCall) DoAndReturn(f func(context.Context, logger.ILogger)) *MockITracerShutdownCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
