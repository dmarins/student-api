// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/usecases/student_creation.go
//
// Generated by this command:
//
//	mockgen -source=internal/domain/usecases/student_creation.go -destination=internal/domain/mocks/student_creation.go -typed=true -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	dtos "github.com/dmarins/student-api/internal/domain/dtos"
	gomock "go.uber.org/mock/gomock"
)

// MockIStudentCreationUseCase is a mock of IStudentCreationUseCase interface.
type MockIStudentCreationUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockIStudentCreationUseCaseMockRecorder
	isgomock struct{}
}

// MockIStudentCreationUseCaseMockRecorder is the mock recorder for MockIStudentCreationUseCase.
type MockIStudentCreationUseCaseMockRecorder struct {
	mock *MockIStudentCreationUseCase
}

// NewMockIStudentCreationUseCase creates a new mock instance.
func NewMockIStudentCreationUseCase(ctrl *gomock.Controller) *MockIStudentCreationUseCase {
	mock := &MockIStudentCreationUseCase{ctrl: ctrl}
	mock.recorder = &MockIStudentCreationUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIStudentCreationUseCase) EXPECT() *MockIStudentCreationUseCaseMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockIStudentCreationUseCase) Execute(ctx context.Context, studentInput dtos.StudentInput) *dtos.Result {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, studentInput)
	ret0, _ := ret[0].(*dtos.Result)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockIStudentCreationUseCaseMockRecorder) Execute(ctx, studentInput any) *MockIStudentCreationUseCaseExecuteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockIStudentCreationUseCase)(nil).Execute), ctx, studentInput)
	return &MockIStudentCreationUseCaseExecuteCall{Call: call}
}

// MockIStudentCreationUseCaseExecuteCall wrap *gomock.Call
type MockIStudentCreationUseCaseExecuteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIStudentCreationUseCaseExecuteCall) Return(arg0 *dtos.Result) *MockIStudentCreationUseCaseExecuteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIStudentCreationUseCaseExecuteCall) Do(f func(context.Context, dtos.StudentInput) *dtos.Result) *MockIStudentCreationUseCaseExecuteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIStudentCreationUseCaseExecuteCall) DoAndReturn(f func(context.Context, dtos.StudentInput) *dtos.Result) *MockIStudentCreationUseCaseExecuteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
