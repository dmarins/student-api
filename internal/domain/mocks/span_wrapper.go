// Code generated by MockGen. DO NOT EDIT.
// Source: internal/infrastructure/tracer/span_wrapper.go
//
// Generated by this command:
//
//	mockgen -source=internal/infrastructure/tracer/span_wrapper.go -destination=internal/domain/mocks/span_wrapper.go -typed=true -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockISpan is a mock of ISpan interface.
type MockISpan struct {
	ctrl     *gomock.Controller
	recorder *MockISpanMockRecorder
}

// MockISpanMockRecorder is the mock recorder for MockISpan.
type MockISpanMockRecorder struct {
	mock *MockISpan
}

// NewMockISpan creates a new mock instance.
func NewMockISpan(ctrl *gomock.Controller) *MockISpan {
	mock := &MockISpan{ctrl: ctrl}
	mock.recorder = &MockISpanMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISpan) EXPECT() *MockISpanMockRecorder {
	return m.recorder
}

// AddEvent mocks base method.
func (m *MockISpan) AddEvent(name string, opts ...any) {
	m.ctrl.T.Helper()
	varargs := []any{name}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddEvent", varargs...)
}

// AddEvent indicates an expected call of AddEvent.
func (mr *MockISpanMockRecorder) AddEvent(name any, opts ...any) *MockISpanAddEventCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{name}, opts...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEvent", reflect.TypeOf((*MockISpan)(nil).AddEvent), varargs...)
	return &MockISpanAddEventCall{Call: call}
}

// MockISpanAddEventCall wrap *gomock.Call
type MockISpanAddEventCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockISpanAddEventCall) Return() *MockISpanAddEventCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockISpanAddEventCall) Do(f func(string, ...any)) *MockISpanAddEventCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockISpanAddEventCall) DoAndReturn(f func(string, ...any)) *MockISpanAddEventCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// End mocks base method.
func (m *MockISpan) End() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "End")
}

// End indicates an expected call of End.
func (mr *MockISpanMockRecorder) End() *MockISpanEndCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "End", reflect.TypeOf((*MockISpan)(nil).End))
	return &MockISpanEndCall{Call: call}
}

// MockISpanEndCall wrap *gomock.Call
type MockISpanEndCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockISpanEndCall) Return() *MockISpanEndCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockISpanEndCall) Do(f func()) *MockISpanEndCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockISpanEndCall) DoAndReturn(f func()) *MockISpanEndCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
