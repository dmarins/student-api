// Code generated by MockGen. DO NOT EDIT.
// Source: internal/infrastructure/logger/logger.go
//
// Generated by this command:
//
//	mockgen -source=internal/infrastructure/logger/logger.go -destination=internal/domain/mocks/logger.go -typed=true -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockILogger is a mock of ILogger interface.
type MockILogger struct {
	ctrl     *gomock.Controller
	recorder *MockILoggerMockRecorder
	isgomock struct{}
}

// MockILoggerMockRecorder is the mock recorder for MockILogger.
type MockILoggerMockRecorder struct {
	mock *MockILogger
}

// NewMockILogger creates a new mock instance.
func NewMockILogger(ctrl *gomock.Controller) *MockILogger {
	mock := &MockILogger{ctrl: ctrl}
	mock.recorder = &MockILoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockILogger) EXPECT() *MockILoggerMockRecorder {
	return m.recorder
}

// Debug mocks base method.
func (m *MockILogger) Debug(ctx context.Context, msg string, fields ...string) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, msg}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Debug", varargs...)
}

// Debug indicates an expected call of Debug.
func (mr *MockILoggerMockRecorder) Debug(ctx, msg any, fields ...any) *MockILoggerDebugCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, msg}, fields...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debug", reflect.TypeOf((*MockILogger)(nil).Debug), varargs...)
	return &MockILoggerDebugCall{Call: call}
}

// MockILoggerDebugCall wrap *gomock.Call
type MockILoggerDebugCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockILoggerDebugCall) Return() *MockILoggerDebugCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockILoggerDebugCall) Do(f func(context.Context, string, ...string)) *MockILoggerDebugCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockILoggerDebugCall) DoAndReturn(f func(context.Context, string, ...string)) *MockILoggerDebugCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Error mocks base method.
func (m *MockILogger) Error(ctx context.Context, msg string, err error, fields ...string) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, msg, err}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Error", varargs...)
}

// Error indicates an expected call of Error.
func (mr *MockILoggerMockRecorder) Error(ctx, msg, err any, fields ...any) *MockILoggerErrorCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, msg, err}, fields...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockILogger)(nil).Error), varargs...)
	return &MockILoggerErrorCall{Call: call}
}

// MockILoggerErrorCall wrap *gomock.Call
type MockILoggerErrorCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockILoggerErrorCall) Return() *MockILoggerErrorCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockILoggerErrorCall) Do(f func(context.Context, string, error, ...string)) *MockILoggerErrorCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockILoggerErrorCall) DoAndReturn(f func(context.Context, string, error, ...string)) *MockILoggerErrorCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Fatal mocks base method.
func (m *MockILogger) Fatal(ctx context.Context, msg string, err error, fields ...string) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, msg, err}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Fatal", varargs...)
}

// Fatal indicates an expected call of Fatal.
func (mr *MockILoggerMockRecorder) Fatal(ctx, msg, err any, fields ...any) *MockILoggerFatalCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, msg, err}, fields...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fatal", reflect.TypeOf((*MockILogger)(nil).Fatal), varargs...)
	return &MockILoggerFatalCall{Call: call}
}

// MockILoggerFatalCall wrap *gomock.Call
type MockILoggerFatalCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockILoggerFatalCall) Return() *MockILoggerFatalCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockILoggerFatalCall) Do(f func(context.Context, string, error, ...string)) *MockILoggerFatalCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockILoggerFatalCall) DoAndReturn(f func(context.Context, string, error, ...string)) *MockILoggerFatalCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Info mocks base method.
func (m *MockILogger) Info(ctx context.Context, msg string, fields ...string) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, msg}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Info", varargs...)
}

// Info indicates an expected call of Info.
func (mr *MockILoggerMockRecorder) Info(ctx, msg any, fields ...any) *MockILoggerInfoCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, msg}, fields...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockILogger)(nil).Info), varargs...)
	return &MockILoggerInfoCall{Call: call}
}

// MockILoggerInfoCall wrap *gomock.Call
type MockILoggerInfoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockILoggerInfoCall) Return() *MockILoggerInfoCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockILoggerInfoCall) Do(f func(context.Context, string, ...string)) *MockILoggerInfoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockILoggerInfoCall) DoAndReturn(f func(context.Context, string, ...string)) *MockILoggerInfoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Sync mocks base method.
func (m *MockILogger) Sync() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sync")
	ret0, _ := ret[0].(error)
	return ret0
}

// Sync indicates an expected call of Sync.
func (mr *MockILoggerMockRecorder) Sync() *MockILoggerSyncCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sync", reflect.TypeOf((*MockILogger)(nil).Sync))
	return &MockILoggerSyncCall{Call: call}
}

// MockILoggerSyncCall wrap *gomock.Call
type MockILoggerSyncCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockILoggerSyncCall) Return(arg0 error) *MockILoggerSyncCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockILoggerSyncCall) Do(f func() error) *MockILoggerSyncCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockILoggerSyncCall) DoAndReturn(f func() error) *MockILoggerSyncCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Warn mocks base method.
func (m *MockILogger) Warn(ctx context.Context, msg string, fields ...string) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, msg}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Warn", varargs...)
}

// Warn indicates an expected call of Warn.
func (mr *MockILoggerMockRecorder) Warn(ctx, msg any, fields ...any) *MockILoggerWarnCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, msg}, fields...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warn", reflect.TypeOf((*MockILogger)(nil).Warn), varargs...)
	return &MockILoggerWarnCall{Call: call}
}

// MockILoggerWarnCall wrap *gomock.Call
type MockILoggerWarnCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockILoggerWarnCall) Return() *MockILoggerWarnCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockILoggerWarnCall) Do(f func(context.Context, string, ...string)) *MockILoggerWarnCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockILoggerWarnCall) DoAndReturn(f func(context.Context, string, ...string)) *MockILoggerWarnCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
