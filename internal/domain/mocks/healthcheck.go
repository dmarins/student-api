// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/usecases/healthcheck.go
//
// Generated by this command:
//
//	mockgen -source=internal/domain/usecases/healthcheck.go -destination=internal/domain/mocks/healthcheck.go -typed=true -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	dtos "github.com/dmarins/student-api/internal/domain/dtos"
	gomock "go.uber.org/mock/gomock"
)

// MockIHealthCheckUseCase is a mock of IHealthCheckUseCase interface.
type MockIHealthCheckUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockIHealthCheckUseCaseMockRecorder
}

// MockIHealthCheckUseCaseMockRecorder is the mock recorder for MockIHealthCheckUseCase.
type MockIHealthCheckUseCaseMockRecorder struct {
	mock *MockIHealthCheckUseCase
}

// NewMockIHealthCheckUseCase creates a new mock instance.
func NewMockIHealthCheckUseCase(ctrl *gomock.Controller) *MockIHealthCheckUseCase {
	mock := &MockIHealthCheckUseCase{ctrl: ctrl}
	mock.recorder = &MockIHealthCheckUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIHealthCheckUseCase) EXPECT() *MockIHealthCheckUseCaseMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockIHealthCheckUseCase) Execute(ctx context.Context) *dtos.Result {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx)
	ret0, _ := ret[0].(*dtos.Result)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockIHealthCheckUseCaseMockRecorder) Execute(ctx any) *MockIHealthCheckUseCaseExecuteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockIHealthCheckUseCase)(nil).Execute), ctx)
	return &MockIHealthCheckUseCaseExecuteCall{Call: call}
}

// MockIHealthCheckUseCaseExecuteCall wrap *gomock.Call
type MockIHealthCheckUseCaseExecuteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIHealthCheckUseCaseExecuteCall) Return(arg0 *dtos.Result) *MockIHealthCheckUseCaseExecuteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIHealthCheckUseCaseExecuteCall) Do(f func(context.Context) *dtos.Result) *MockIHealthCheckUseCaseExecuteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIHealthCheckUseCaseExecuteCall) DoAndReturn(f func(context.Context) *dtos.Result) *MockIHealthCheckUseCaseExecuteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
